// src/components/Login.tsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

interface LoginProps {
  setIsAuthenticated: (value: boolean) => void;
}

const Login: React.FC<LoginProps> = ({ setIsAuthenticated }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    // Placeholder for API call
    try {
      // Simulating successful login
      setIsAuthenticated(true);
      navigate('/dashboard');
    } catch (err) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="w-full max-w-md rounded-lg bg-white p-8 shadow-md">
        <h2 className="mb-6 text-center text-3xl font-bold text-gray-800">Login</h2>
        {error && <p className="mb-4 rounded bg-red-100 p-3 text-red-700">{error}</p>}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="email">
              Email
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="email"
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="mb-6">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="password">
              Password
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="password"
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <div className="flex items-center justify-between">
            <button
              className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 focus:outline-none focus:shadow-outline"
              type="submit"
            >
              Sign In
            </button>
            <Link
              className="inline-block align-baseline text-sm font-bold text-blue-500 hover:text-blue-800"
              to="/register"
            >
              Create Account
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
};

// src/components/Register.tsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

interface RegisterProps {
  setIsAuthenticated: (value: boolean) => void;
}

const Register: React.FC<RegisterProps> = ({ setIsAuthenticated }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    // Placeholder for API call
    try {
      // Simulating successful registration
      setIsAuthenticated(true);
      navigate('/dashboard');
    } catch (err) {
      setError('Registration failed');
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="w-full max-w-md rounded-lg bg-white p-8 shadow-md">
        <h2 className="mb-6 text-center text-3xl font-bold text-gray-800">Create Account</h2>
        {error && <p className="mb-4 rounded bg-red-100 p-3 text-red-700">{error}</p>}
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="name">
              Name
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="name"
              type="text"
              placeholder="Full Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div className="mb-4">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="email">
              Email
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="email"
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="mb-4">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="password">
              Password
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="password"
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <div className="mb-6">
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="confirmPassword">
              Confirm Password
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="confirmPassword"
              type="password"
              placeholder="Confirm Password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          <div className="flex items-center justify-between">
            <button
              className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 focus:outline-none focus:shadow-outline"
              type="submit"
            >
              Register
            </button>
            <Link
              className="inline-block align-baseline text-sm font-bold text-blue-500 hover:text-blue-800"
              to="/login"
            >
              Already have an account?
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
};

// src/components/Dashboard.tsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

const Dashboard: React.FC = () => {
  const [summary, setSummary] = useState({
    totalSpent: 0,
    totalBudget: 0,
    recentExpenses: [],
    categoryData: []
  });

  // Simulated data for now
  useEffect(() => {
    // This would be an API call in a real app
    setSummary({
      totalSpent: 1250.75,
      totalBudget: 2000,
      recentExpenses: [
        { id: 1, date: '2025-02-20', description: 'Grocery Shopping', amount: 78.45, category: 'Food' },
        { id: 2, date: '2025-02-19', description: 'Netflix Subscription', amount: 15.99, category: 'Entertainment' },
        { id: 3, date: '2025-02-17', description: 'Gas', amount: 45.20, category: 'Transportation' }
      ],
      categoryData: [
        { name: 'Food', value: 450 },
        { name: 'Housing', value: 650 },
        { name: 'Transportation', value: 120 },
        { name: 'Entertainment', value: 80 }
      ]
    });
  }, []);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">Dashboard</h1>
        <Link
          to="/expenses/new"
          className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
        >
          Add Expense
        </Link>
      </div>
      
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        <div className="rounded-lg bg-white p-6 shadow-md">
          <h2 className="mb-2 text-lg font-semibold text-gray-700">Total Spent</h2>
          <p className="text-3xl font-bold text-blue-600">${summary.totalSpent.toFixed(2)}</p>
          <p className="mt-2 text-sm text-gray-500">out of ${summary.totalBudget.toFixed(2)} budget</p>
          <div className="mt-4 h-2 w-full rounded-full bg-gray-200">
            <div 
              className="h-2 rounded-full bg-blue-500" 
              style={{ width: `${Math.min(100, (summary.totalSpent / summary.totalBudget) * 100)}%` }}
            ></div>
          </div>
        </div>
        
        <div className="rounded-lg bg-white p-6 shadow-md">
          <h2 className="mb-4 text-lg font-semibold text-gray-700">Spending by Category</h2>
          <div className="h-48">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={summary.categoryData}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={80}
                  paddingAngle={5}
                  dataKey="value"
                  label={({name}) => name}
                >
                  {summary.categoryData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => `$${value}`} />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        <div className="rounded-lg bg-white p-6 shadow-md md:col-span-2 lg:col-span-1">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-700">Recent Expenses</h2>
            <Link to="/expenses" className="text-sm text-blue-500 hover:text-blue-700">View All</Link>
          </div>
          <div className="mt-4 divide-y">
            {summary.recentExpenses.map((expense: any) => (
              <div key={expense.id} className="py-3">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-gray-800">{expense.description}</p>
                    <p className="text-sm text-gray-500">{expense.date} • {expense.category}</p>
                  </div>
                  <p className="font-semibold text-gray-800">${expense.amount.toFixed(2)}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// src/components/ExpenseForm.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const ExpenseForm: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    description: '',
    amount: '',
    date: '',
    category: '',
    notes: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  // Categories would likely come from the API
  const categories = ['Food', 'Housing', 'Transportation', 'Entertainment', 'Utilities', 'Shopping', 'Other'];

  useEffect(() => {
    if (id) {
      // Fetch expense data if editing (would be an API call)
      // Simulated data for now
      setFormData({
        description: 'Grocery Shopping',
        amount: '78.45',
        date: '2025-02-20',
        category: 'Food',
        notes: 'Weekly shopping at Costco'
      });
    } else {
      // Set today's date for new expenses
      setFormData({
        ...formData,
        date: new Date().toISOString().split('T')[0]
      });
    }
  }, [id]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      // This would be an API call in a real app
      console.log('Submitting expense:', formData);
      
      // Redirect after successful submission
      navigate('/expenses');
    } catch (err) {
      setError('Failed to save expense');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
      <h1 className="mb-6 text-2xl font-bold text-gray-800">
        {id ? 'Edit Expense' : 'Add New Expense'}
      </h1>
      
      {error && <p className="mb-4 rounded bg-red-100 p-3 text-red-700">{error}</p>}
      
      <form onSubmit={handleSubmit} className="rounded-lg bg-white p-6 shadow-md">
        <div className="mb-4">
          <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="description">
            Description
          </label>
          <input
            className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
            id="description"
            name="description"
            type="text"
            placeholder="What did you spend on?"
            value={formData.description}
            onChange={handleChange}
            required
          />
        </div>
        
        <div className="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2">
          <div>
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="amount">
              Amount
            </label>
            <div className="relative">
              <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-700">$</span>
              <input
                className="w-full appearance-none rounded border pl-8 pr-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
                id="amount"
                name="amount"
                type="number"
                step="0.01"
                min="0"
                placeholder="0.00"
                value={formData.amount}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          
          <div>
            <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="date">
              Date
            </label>
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              id="date"
              name="date"
              type="date"
              value={formData.date}
              onChange={handleChange}
              required
            />
          </div>
        </div>
        
        <div className="mb-4">
          <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="category">
            Category
          </label>
          <select
            className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
            id="category"
            name="category"
            value={formData.category}
            onChange={handleChange}
            required
          >
            <option value="">Select a category</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
        </div>
        
        <div className="mb-6">
          <label className="mb-2 block text-sm font-bold text-gray-700" htmlFor="notes">
            Notes (Optional)
          </label>
          <textarea
            className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
            id="notes"
            name="notes"
            rows={3}
            placeholder="Any additional details..."
            value={formData.notes}
            onChange={handleChange}
          />
        </div>
        
        <div className="flex items-center justify-between">
          <button
            className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 focus:outline-none focus:shadow-outline"
            type="submit"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Saving...' : 'Save Expense'}
          </button>
          <button
            className="rounded border border-gray-300 bg-white px-4 py-2 font-bold text-gray-700 hover:bg-gray-100 focus:outline-none focus:shadow-outline"
            type="button"
            onClick={() => navigate('/expenses')}
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

// src/components/ExpenseList.tsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

interface Expense {
  id: number;
  date: string;
  description: string;
  category: string;
  amount: number;
}

const ExpenseList: React.FC = () => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');

  // Categories would likely come from the API
  const categories = ['All', 'Food', 'Housing', 'Transportation', 'Entertainment', 'Utilities', 'Shopping', 'Other'];

  useEffect(() => {
    // Fetch expenses (would be an API call in a real app)
    // Simulated data for now
    setTimeout(() => {
      setExpenses([
        { id: 1, date: '2025-02-20', description: 'Grocery Shopping', category: 'Food', amount: 78.45 },
        { id: 2, date: '2025-02-19', description: 'Netflix Subscription', category: 'Entertainment', amount: 15.99 },
        { id: 3, date: '2025-02-17', description: 'Gas', category: 'Transportation', amount: 45.20 },
        { id: 4, date: '2025-02-15', description: 'Rent', category: 'Housing', amount: 850.00 },
        { id: 5, date: '2025-02-12', description: 'Dinner with friends', category: 'Food', amount: 65.30 },
        { id: 6, date: '2025-02-10', description: 'Electricity Bill', category: 'Utilities', amount: 95.40 },
        { id: 7, date: '2025-02-08', description: 'New Shoes', category: 'Shopping', amount: 89.99 }
      ]);
      setLoading(false);
    }, 500);
  }, []);

  const handleDelete = (id: number) => {
    // This would be an API call in a real app
    setExpenses(expenses.filter(expense => expense.id !== id));
  };

  const filteredExpenses = expenses.filter(expense => {
    const matchesSearch = expense.description.toLowerCase().includes(filter.toLowerCase());
    const matchesCategory = categoryFilter === '' || categoryFilter === 'All' || expense.category === categoryFilter;
    return matchesSearch && matchesCategory;
  });

  return (
    <div>
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">Expenses</h1>
        <Link
          to="/expenses/new"
          className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
        >
          Add Expense
        </Link>
      </div>
      
      <div className="mt-6 rounded-lg bg-white p-6 shadow-md">
        <div className="mb-6 flex flex-col gap-4 md:flex-row">
          <div className="flex-grow">
            <input
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              type="text"
              placeholder="Search expenses..."
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
            />
          </div>
          <div>
            <select
              className="w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 focus:outline-none focus:shadow-outline"
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>
        
        {loading ? (
          <div className="flex justify-center py-8">
            <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-500"></div>
          </div>
        ) : filteredExpenses.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                    Date
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                    Description
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                    Category
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                    Amount
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {filteredExpenses.map((expense) => (
                  <tr key={expense.id}>
                    <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                      {expense.date}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-900">
                      {expense.description}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500">
                      <span className="rounded-full bg-blue-100 px-2 py-1 text-xs font-semibold text-blue-800">
                        {expense.category}
                      </span>
                    </td>
                    <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">
                      ${expense.amount.toFixed(2)}
                    </td>
                    <td className="whitespace-nowrap px-6 py-4 text-right text-sm font-medium">
                      <Link to={`/expenses/${expense.id}`} className="text-blue-600 hover:text-blue-900">
                        Edit
                      </Link>
                      <button
                        onClick={() => handleDelete(expense.id)}
                        className="ml-4 text-red-600 hover:text-red-900"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="py-8 text-center text-gray-500">
            No expenses found. Add a new expense to get started.
          </div>
        )}
      </div>
    </div>
  );
};

// src/components/Navbar.tsx
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';

const Navbar: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();

  const isActive = (path: string) => {
    return location.pathname === path;
  };

  const navItems = [
    { path: '/dashboard', label: 'Dashboard' },
    { path: '/expenses', label: 'Expenses' },
    { path: '/reports', label: 'Reports' },
    { path: '/settings', label: 'Settings' }
  ];

  return (
    <nav className="bg-white shadow">
      <div className="container mx-auto px-4">
        <div className="flex h-16 items-center justify-between">
          <div className="flex items-center">
            <Link to="/dashboard" className="flex items-center">
              <span className="text-xl font-bold text-blue-600">ExpenseTracker</span>
            </Link>
            <div className="ml-10 hidden md:block">
              <div className="flex items-center space-x-4">
                {navItems.map((item) => (
                  <Link
                    key={item.path}
                    to={item.path}
                    className={`px-3 py-2 rounded-md text-sm font-medium ${
                      isActive(item.path)
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {item.label}
                  </Link>
                ))}
              </div>
            </div>
          </div>
          <div className="hidden md:block">
            <div className="flex items-center">
              <button
                className="ml-4 rounded-full bg-gray-200 p-1 text-gray-500 hover:text-
