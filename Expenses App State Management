// src/context/types.ts
export interface Expense {
  id: number;
  date: string;
  description: string;
  amount: number;
  category: string;
  notes?: string;
}

export interface Category {
  id: number;
  name: string;
}

export interface User {
  id: number;
  name: string;
  email: string;
}

export interface ExpenseSummary {
  totalSpent: number;
  totalBudget: number;
  categoryBreakdown: { category: string; amount: number }[];
}

export interface AppState {
  user: User | null;
  expenses: Expense[];
  categories: Category[];
  isLoading: boolean;
  error: string | null;
  summary: ExpenseSummary | null;
}

export type ActionType = 
  | { type: 'SET_USER'; payload: User | null }
  | { type: 'SET_EXPENSES'; payload: Expense[] }
  | { type: 'ADD_EXPENSE'; payload: Expense }
  | { type: 'UPDATE_EXPENSE'; payload: Expense }
  | { type: 'DELETE_EXPENSE'; payload: number }
  | { type: 'SET_CATEGORIES'; payload: Category[] }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_SUMMARY'; payload: ExpenseSummary | null };

// src/context/AppContext.tsx
import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { AppState, ActionType, Expense, Category, User, ExpenseSummary } from './types';

const initialState: AppState = {
  user: null,
  expenses: [],
  categories: [],
  isLoading: false,
  error: null,
  summary: null
};

const AppContext = createContext<{
  state: AppState;
  dispatch: React.Dispatch<ActionType>;
}>({
  state: initialState,
  dispatch: () => null
});

const appReducer = (state: AppState, action: ActionType): AppState => {
  switch (action.type) {
    case 'SET_USER':
      return {
        ...state,
        user: action.payload
      };
    case 'SET_EXPENSES':
      return {
        ...state,
        expenses: action.payload
      };
    case 'ADD_EXPENSE':
      return {
        ...state,
        expenses: [...state.expenses, action.payload]
      };
    case 'UPDATE_EXPENSE':
      return {
        ...state,
        expenses: state.expenses.map(expense => 
          expense.id === action.payload.id ? action.payload : expense
        )
      };
    case 'DELETE_EXPENSE':
      return {
        ...state,
        expenses: state.expenses.filter(expense => expense.id !== action.payload)
      };
    case 'SET_CATEGORIES':
      return {
        ...state,
        categories: action.payload
      };
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload
      };
    case 'SET_SUMMARY':
      return {
        ...state,
        summary: action.payload
      };
    default:
      return state;
  }
};

export const AppProvider: React.FC<{children: ReactNode}> = ({ children }) => {
  const [state, dispatch] = useReducer(appReducer, initialState);

  return (
    <AppContext.Provider value={{ state, dispatch }}>
      {children}
    </AppContext.Provider>
  );
};

export const useAppContext = () => useContext(AppContext);

// src/api/expenseService.ts
import { Expense, Category, User, ExpenseSummary } from '../context/types';

// This would be replaced with actual API calls
const API_DELAY = 500; // Simulate network delay

// Mock data
const mockExpenses: Expense[] = [
  { id: 1, date: '2025-02-20', description: 'Grocery Shopping', category: 'Food', amount: 78.45, notes: 'Weekly groceries' },
  { id: 2, date: '2025-02-19', description: 'Netflix Subscription', category: 'Entertainment', amount: 15.99 },
  { id: 3, date: '2025-02-17', description: 'Gas', category: 'Transportation', amount: 45.20 },
  { id: 4, date: '2025-02-15', description: 'Rent', category: 'Housing', amount: 850.00 },
  { id: 5, date: '2025-02-12', description: 'Dinner with friends', category: 'Food', amount: 65.30 },
];

const mockCategories: Category[] = [
  { id: 1, name: 'Food' },
  { id: 2, name: 'Housing' },
  { id: 3, name: 'Transportation' },
  { id: 4, name: 'Entertainment' },
  { id: 5, name: 'Utilities' },
  { id: 6, name: 'Shopping' },
  { id: 7, name: 'Other' },
];

const mockUser: User = {
  id: 1,
  name: 'John Doe',
  email: 'john.doe@example.com'
};

const mockSummary: ExpenseSummary = {
  totalSpent: 1054.94,
  totalBudget: 2000,
  categoryBreakdown: [
    { category: 'Food', amount: 143.75 },
    { category: 'Housing', amount: 850.00 },
    { category: 'Transportation', amount: 45.20 },
    { category: 'Entertainment', amount: 15.99 },
  ]
};

// API service functions
export const fetchExpenses = (): Promise<Expense[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([...mockExpenses]);
    }, API_DELAY);
  });
};

export const fetchExpenseById = (id: number): Promise<Expense | null> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const expense = mockExpenses.find(e => e.id === id) || null;
      resolve(expense);
    }, API_DELAY);
  });
};

export const createExpense = (expense: Omit<Expense, 'id'>): Promise<Expense> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const newExpense = {
        ...expense,
        id: Math.max(...mockExpenses.map(e => e.id), 0) + 1
      };
      mockExpenses.push(newExpense);
      resolve(newExpense);
    }, API_DELAY);
  });
};

export const updateExpense = (expense: Expense): Promise<Expense> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const index = mockExpenses.findIndex(e => e.id === expense.id);
      if (index !== -1) {
        mockExpenses[index] = expense;
      }
      resolve(expense);
    }, API_DELAY);
  });
};

export const deleteExpense = (id: number): Promise<boolean> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const index = mockExpenses.findIndex(e => e.id === id);
      if (index !== -1) {
        mockExpenses.splice(index, 1);
        resolve(true);
      } else {
        resolve(false);
      }
    }, API_DELAY);
  });
};

export const fetchCategories = (): Promise<Category[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([...mockCategories]);
    }, API_DELAY);
  });
};

export const fetchCurrentUser = (): Promise<User> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({...mockUser});
    }, API_DELAY);
  });
};

export const fetchExpenseSummary = (): Promise<ExpenseSummary> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({...mockSummary});
    }, API_DELAY);
  });
};

export const login = (email: string, password: string): Promise<User> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Simple validation for demo purposes
      if (email === 'user@example.com' && password === 'password') {
        resolve({...mockUser});
      } else {
        reject(new Error('Invalid credentials'));
      }
    }, API_DELAY);
  });
};

export const register = (name: string, email: string, password: string): Promise<User> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({...mockUser, name, email});
    }, API_DELAY);
  });
};

export const logout = (): Promise<boolean> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true);
    }, API_DELAY);
  });
};

// src/hooks/useExpenses.ts
import { useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import * as expenseService from '../api/expenseService';
import { Expense } from '../context/types';

export const useExpenses = () => {
  const { state, dispatch } = useAppContext();

  const loadExpenses = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const expenses = await expenseService.fetchExpenses();
      dispatch({ type: 'SET_EXPENSES', payload: expenses });
      dispatch({ type: 'SET_ERROR', payload: null });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to load expenses' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const addExpense = async (expense: Omit<Expense, 'id'>) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const newExpense = await expenseService.createExpense(expense);
      dispatch({ type: 'ADD_EXPENSE', payload: newExpense });
      dispatch({ type: 'SET_ERROR', payload: null });
      return newExpense;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to add expense' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const updateExpense = async (expense: Expense) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const updatedExpense = await expenseService.updateExpense(expense);
      dispatch({ type: 'UPDATE_EXPENSE', payload: updatedExpense });
      dispatch({ type: 'SET_ERROR', payload: null });
      return updatedExpense;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to update expense' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const deleteExpense = async (id: number) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const success = await expenseService.deleteExpense(id);
      if (success) {
        dispatch({ type: 'DELETE_EXPENSE', payload: id });
      }
      dispatch({ type: 'SET_ERROR', payload: null });
      return success;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to delete expense' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const getExpenseById = async (id: number) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const expense = await expenseService.fetchExpenseById(id);
      dispatch({ type: 'SET_ERROR', payload: null });
      return expense;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to get expense details' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  useEffect(() => {
    loadExpenses();
  }, []);

  return {
    expenses: state.expenses,
    isLoading: state.isLoading,
    error: state.error,
    loadExpenses,
    addExpense,
    updateExpense,
    deleteExpense,
    getExpenseById
  };
};

// src/hooks/useCategories.ts
import { useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import * as expenseService from '../api/expenseService';

export const useCategories = () => {
  const { state, dispatch } = useAppContext();

  const loadCategories = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const categories = await expenseService.fetchCategories();
      dispatch({ type: 'SET_CATEGORIES', payload: categories });
      dispatch({ type: 'SET_ERROR', payload: null });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to load categories' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  useEffect(() => {
    loadCategories();
  }, []);

  return {
    categories: state.categories,
    isLoading: state.isLoading,
    error: state.error,
    loadCategories
  };
};

// src/hooks/useAuth.ts
import { useAppContext } from '../context/AppContext';
import * as expenseService from '../api/expenseService';

export const useAuth = () => {
  const { state, dispatch } = useAppContext();

  const login = async (email: string, password: string) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const user = await expenseService.login(email, password);
      dispatch({ type: 'SET_USER', payload: user });
      dispatch({ type: 'SET_ERROR', payload: null });
      return user;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Invalid email or password' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const register = async (name: string, email: string, password: string) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const user = await expenseService.register(name, email, password);
      dispatch({ type: 'SET_USER', payload: user });
      dispatch({ type: 'SET_ERROR', payload: null });
      return user;
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Registration failed' });
      throw error;
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const logout = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      await expenseService.logout();
      dispatch({ type: 'SET_USER', payload: null });
      dispatch({ type: 'SET_ERROR', payload: null });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Logout failed' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  const checkAuth = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const user = await expenseService.fetchCurrentUser();
      dispatch({ type: 'SET_USER', payload: user });
      dispatch({ type: 'SET_ERROR', payload: null });
      return user;
    } catch (error) {
      dispatch({ type: 'SET_USER', payload: null });
      dispatch({ type: 'SET_ERROR', payload: null });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  return {
    user: state.user,
    isLoading: state.isLoading,
    error: state.error,
    isAuthenticated: !!state.user,
    login,
    register,
    logout,
    checkAuth
  };
};

// src/hooks/useSummary.ts
import { useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import * as expenseService from '../api/expenseService';

export const useSummary = () => {
  const { state, dispatch } = useAppContext();

  const loadSummary = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      const summary = await expenseService.fetchExpenseSummary();
      dispatch({ type: 'SET_SUMMARY', payload: summary });
      dispatch({ type: 'SET_ERROR', payload: null });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to load summary data' });
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  };

  useEffect(() => {
    loadSummary();
  }, [state.expenses]); // Reload summary when expenses change

  return {
    summary: state.summary,
    isLoading: state.isLoading,
    error: state.error,
    loadSummary
  };
};
